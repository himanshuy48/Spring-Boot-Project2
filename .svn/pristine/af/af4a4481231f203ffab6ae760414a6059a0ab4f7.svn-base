package com.digi.uniprr.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.websocket.server.PathParam;

import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.digi.uniprr.VO.FunderDetailsVO;
import com.digi.uniprr.VO.IDVO;
import com.digi.uniprr.VO.ManuScriptVO;
import com.digi.uniprr.VO.ManuscriptCoAuthorVO;
import com.digi.uniprr.VO.ManuscriptFileVO;
import com.digi.uniprr.VO.ManuscriptTypeJournalVO;
import com.digi.uniprr.VO.ManuscriptTypeTitleAbstractVO;
import com.digi.uniprr.VO.ResubmissionManuscriptFileVo;
import com.digi.uniprr.model.ManuScriptFile;
import com.digi.uniprr.service.AuthorService;
import com.digi.uniprr.service.ManuScriptFileService;
import com.digi.uniprr.service.ManuScriptService;

@RestController
public class AuthorRestController {

	private final Logger log = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	Environment environment;

	@Autowired
	ManuScriptFileService manuScriptFileService;

	@Autowired
	ManuScriptService manuscriptService;

	@Autowired
	AuthorService authorService;

	@PostMapping("submitManuscriptFileUpload")
	public ResponseEntity<?> submitManuscriptFileUpload(@ModelAttribute ManuScriptFile manuscriptFile,
			MultipartFile[] files, @RequestParam("manuscriptVersion") Integer manuscriptVersion,
			HttpServletRequest request) {
		log.info("Inside AuthorRestController submitManuscriptFileUpload");
		JSONObject obj = new JSONObject();
		List<ManuScriptFile> manuscriptFileList = new ArrayList<ManuScriptFile>();
		/*
		 * String location = System.getProperty("catalina.base"); String
		 * attachmentFolderPath = location + File.separator + "webapps" + File.separator
		 * + "UniprrFileFolder" + File.separator + "MNT_LWW_JOURNAL_" + "R" +
		 * manuscriptVersion + "_" + manuscriptFile.getManuScriptId();
		 */
		  String attachmentFolderPath = environment.getProperty("file.zipMaking-dir")
		  +"UniprrFileFolder" + File.separator + "MNT_LWW_JOURNAL_" +"R"+manuscriptVersion+"_"+
		  manuscriptFile.getManuScriptId();
		 
		File dir = new File(attachmentFolderPath);
		if (!dir.exists()) {
			dir.mkdirs();
		}
		for (int i = 0; i < files.length; i++) {
			MultipartFile file = files[i];
			BufferedOutputStream stream = null;
			try {
				byte[] bytes = file.getBytes();
				File serverFile = new File(dir.getAbsolutePath() + File.separator + file.getOriginalFilename());
				stream = new BufferedOutputStream(new FileOutputStream(serverFile));
				stream.write(bytes);
				double fileSizeinBytes = file.getSize();
				double fileSizeInKB = Math.round((fileSizeinBytes / 1024));
				/*
				 * Integer port = request.getServerPort(); String serverIp = "http://" +
				 * request.getServerName(); String Ip = serverIp + ":" + port;
				 * System.out.println(port); String fileServerPath = Ip + File.separator +
				 * "UniprrFileFolder" + File.separator + "MNT_LWW_JOURNAL_" + "R" +
				 * manuscriptVersion + "_" + manuscriptFile.getManuScriptId() + File.separator +
				 * file.getOriginalFilename();
				 */
				  String fileServerPath = environment.getProperty("file.upload-dirServer") +
						  File.separator + "UniprrFileFolder" + File.separator + "MNT_LWW_JOURNAL_"
				  +"R"+manuscriptVersion+"_"+ manuscriptFile.getManuScriptId() + File.separator +
				  file.getOriginalFilename();
				ManuScriptFile ManuScriptFile = new ManuScriptFile();
				ManuScriptFile.setFileName(file.getOriginalFilename());
				ManuScriptFile.setFilePath(fileServerPath);
				ManuScriptFile.setFileSize((int) fileSizeInKB);
				ManuScriptFile.setManuScriptId(manuscriptFile.getManuScriptId());
				ManuScriptFile.setFileVersion(manuscriptVersion);
				ManuScriptFile.setIsActive(1);
				ManuScriptFile manuScriptFile = manuScriptFileService.saveFile(ManuScriptFile);
				manuscriptFileList.add(manuScriptFile);
			} catch (Exception e) {
				log.info("You failed to upload File");
				obj.put("You failed to upload", file.getOriginalFilename());
				return new ResponseEntity<Object>(obj, HttpStatus.INTERNAL_SERVER_ERROR);
			} finally {
				try {
					stream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		log.info("You successfully uploaded file");
		obj.put("You successfully uploaded file=", files.length);
		return new ResponseEntity<Object>(obj, HttpStatus.OK);
	}

	@PostMapping("getManuscriptByactive")
	public ResponseEntity<?> getManuscriptByactive(@PathParam("manuscriptId") Integer manuscriptId,
			@PathParam("manuscriptVersion") Integer manuscriptVersion) {
		log.info("Inside AuthorRestController of getManuscriptByactive");
		JSONObject obj = new JSONObject();
		try {
			List<ManuscriptFileVO> manu = manuScriptFileService.getManuscriptByactive(manuscriptId, manuscriptVersion);
			if (manu != null && !manu.isEmpty()) {
				log.info("Data Found");
				return new ResponseEntity<Object>(manu, HttpStatus.OK);
			} else {
				log.info("Data Not Found");
				obj.put("message", "Data Not Found");
			}

		} catch (Exception e) {
			log.info("Error");
			obj.put("message", "Error");
		}
		return new ResponseEntity<Object>(obj, HttpStatus.OK);
	}

	@PostMapping("downloadFileByManuScriptFileID")
	public ResponseEntity<?> downloadFileByManuScriptFileID(@PathParam("manuscriptFileId") Integer manuscriptFileId) {
		log.info("Inside AuthorRestController downloadFileByManuScriptFileID");
		JSONObject obj = new JSONObject();
		String data = manuScriptFileService.downloadFileByManuScriptFileID(manuscriptFileId);
		obj.put("FilePath", data);
		return new ResponseEntity<Object>(obj, HttpStatus.OK);
	}

	@PostMapping("deleteManuscriptFile")
	public ResponseEntity<?> deleteManuscriptFile(@PathParam("manuscriptFileId") Integer manuscriptFileId) {
		log.info("Inside AuthorRestController deleteManuscriptFile");
		JSONObject obj = new JSONObject();
		try {
			obj.put("message", manuScriptFileService.deleteManuscriptFile(manuscriptFileId));
		} catch (Exception e) {
			log.info("Error");
			obj.put("message", "Error");
		}
		return new ResponseEntity<Object>(obj, HttpStatus.OK);
	}

	@PostMapping("updateManuscriptFileUpload")
	public ResponseEntity<?> updateManuscriptFileUpload(@RequestBody ResubmissionManuscriptFileVo resubmissionManuscriptFileVo,HttpServletRequest request) {
		log.info("Inside AuthorRestController updateManuscriptFileUpload");
		JSONObject obj = new JSONObject();
		try {
			String message = manuScriptFileService.updateManuscriptFileUpload(resubmissionManuscriptFileVo,request);
			log.info("SAVE FILE");
			if(message == "Success") {
				obj.put("SAVE FILE", message);
			}else {
				obj.put("SAVE FILE", message);
			}
		} catch (Exception e) {
			log.info("Error");
			obj.put("message", "Error");
		}
		return new ResponseEntity<Object>(obj, HttpStatus.OK);
	}

	@RequestMapping(value = "/manuscriptTypeJournal/list", method = RequestMethod.POST)
	public ResponseEntity<?> getManuscriptTypeListByJournalId(@RequestBody IDVO vo) {
		log.info("Inside AuthorRestController getManuscriptTypeListByJournalId");
		List<ManuscriptTypeJournalVO> list;
		try {
			list = manuscriptService.getManuscriptTypeJournalListByJournalId(vo.getId());
		} catch (Exception e) {
			JSONObject obj = new JSONObject();
			log.info("Something went wrong");
			obj.put("message", "Something went wrong");
			return new ResponseEntity<>(obj, HttpStatus.OK);
		}

		return new ResponseEntity<>(list, HttpStatus.OK);
	}

	@RequestMapping(value = "/author/typeTitleAbstract", method = RequestMethod.POST)
	public ResponseEntity<?> getManuscriptTypeTitleAbstractDetails(@RequestBody IDVO vo) {
		log.info("Inside AuthorRestController getManuscriptTypeTitleAbstractDetails");
		ManuscriptTypeTitleAbstractVO manuscriptTypeTitleAbstractVO = manuscriptService
				.getManuscriptTypeAbstractDetails(vo);
		return new ResponseEntity<>(manuscriptTypeTitleAbstractVO, HttpStatus.OK);
	}

	@RequestMapping(value = "/author/saveTypeTitleAbstract", method = RequestMethod.POST)
	public ResponseEntity<?> saveTypeTitleAbstractDetails(@RequestBody ManuscriptTypeTitleAbstractVO vo) {
		log.info("Inside AuthorRestController saveTypeTitleAbstractDetails");
		JSONObject obj = new JSONObject();
		try {
			manuscriptService.saveTypeTitleAbstractDetails(vo);
			log.info("Details Saved Successfullly");
			obj.put("message", "Details Saved Successfullly");
		} catch (Exception e) {
			log.info("Some Error occured");
			obj.put("message", "Some Error occured");
		}
		return new ResponseEntity<>(obj, HttpStatus.OK);
	}

	@RequestMapping(value = "/author/getCoAuthorList", method = RequestMethod.POST)
	public ResponseEntity<?> getCoAuthorList(@RequestBody IDVO vo) {
		log.info("Inside AuthorRestController getCoAuthorList");
		List<ManuscriptCoAuthorVO> list = manuscriptService.getCoAuthorList(vo.getId());
		return new ResponseEntity<>(list, HttpStatus.OK);
	}

	@RequestMapping(value = "/author/saveCoAuthorOrder", method = RequestMethod.POST)
	public ResponseEntity<?> saveCoAuthorOrder(@RequestBody List<ManuscriptCoAuthorVO> voList) {
		log.info("Inside AuthorRestController saveCoAuthorOrder");
		JSONObject obj = new JSONObject();
		try {
			manuscriptService.saveCoAuthorOrderList(voList);
			obj.put("message", "Order Saved Successfully");
		} catch (Exception e) {
			e.printStackTrace();
			obj.put("message", "Some Error Occured");
		}
		return new ResponseEntity<>(obj, HttpStatus.OK);
	}

	@RequestMapping(value = "/author/saveWordCountDetails", method = RequestMethod.POST)
	public ResponseEntity<?> saveWordCountDetails(@RequestBody ManuScriptVO vo) {
		log.info("Inside AuthorRestController saveWordCountDetails");
		JSONObject obj = new JSONObject();
		try {
			manuscriptService.saveWordCountDetails(vo);
			obj.put("message", "Saved Successfully");
		} catch (Exception e) {
			e.printStackTrace();
			obj.put("message", "Error");
		}
		return new ResponseEntity<>(obj, HttpStatus.OK);
	}

	@RequestMapping(value = "/author/submitManuscript", method = RequestMethod.POST)
	public ResponseEntity<?> submitManuscript(@RequestBody ManuScriptVO vo) {
		log.info("Inside AuthorRestController submitManuscript");
		JSONObject obj = new JSONObject();
		try {
			manuscriptService.submitManuscript(vo);
			obj.put("message", "Data Updated Successfully");
		} catch (Exception e) {
			obj.put("message", "Submission Date Updation Failure");
		}
		return new ResponseEntity<>(obj, HttpStatus.OK);
	}

	@PostMapping("getResearchFunders")
	public ResponseEntity<?> getResearchFunders(@RequestBody FunderDetailsVO funderDetailsVO) {
		log.info("Inside AuthorRestController getResearchFunders");
		JSONObject obj = new JSONObject();
		try {
			List<FunderDetailsVO> funderList = manuScriptFileService.getResearchFunders(funderDetailsVO);
			if (funderList != null && !funderList.isEmpty()) {
				obj.put("data", funderList);
			} else {
				obj.put("message", "Funder not Found");
			}
		} catch (Exception e) {
			e.printStackTrace();
			obj.put("message", "Error");
		}
		return new ResponseEntity<Object>(obj, HttpStatus.OK);
	}

	@PostMapping("saveManuscriptFunders")
	public ResponseEntity<?> saveResearchFundersForManuscript(@RequestBody List<FunderDetailsVO> funderDetailsVO) {
		log.info("Inside AuthorRestController saveResearchFundersForManuscript");
		JSONObject obj = new JSONObject();
		try {
			manuScriptFileService.saveManuscriptFunders(funderDetailsVO);
			obj.put("message", "Manuscript Funder Save");
		} catch (Exception e) {
			e.printStackTrace();
			obj.put("message", "Error");
		}
		return new ResponseEntity<Object>(obj, HttpStatus.OK);
	}

	@PostMapping("getManuscriptFunders")
	public ResponseEntity<?> getManuscriptFunders(@RequestBody FunderDetailsVO funderDetailsVO) {
		log.info("Inside AuthorRestController getManuscriptFunders");
		JSONObject obj = new JSONObject();
		try {
			List<FunderDetailsVO> list = manuScriptFileService.getManuscriptFunders(funderDetailsVO);
			if (list != null && !list.isEmpty()) {
				obj.put("Data", list);
			} else {
				obj.put("Data", list);
			}
		} catch (Exception e) {
			e.printStackTrace();
			obj.put("message", "Error");
		}
		return new ResponseEntity<Object>(obj, HttpStatus.OK);
	}

}